<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Intro on ðŸŒ» sleepyfran's knowledge garden</title><link>https://sleepyfran.github.io/knowledge/</link><description>Recent content in Intro on ðŸŒ» sleepyfran's knowledge garden</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sleepyfran.github.io/knowledge/index.xml" rel="self" type="application/rss+xml"/><item><title>Formatters</title><link>https://sleepyfran.github.io/knowledge/docs/swift/formatters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sleepyfran.github.io/knowledge/docs/swift/formatters/</guid><description>Formatters # The easiest way to get a formatted element is to use the formatted method that is available on a myriad of data types without the need to instantiate our own formatter. And the best thing is that all these things are also available directly on SwiftUI controls like Text and TextField by using the format parameter.
Below are the most common/useful ones I&amp;rsquo;ve found so far.
Dates # In order to get a date formatted, we can simply call formatted on a Date type, which gives us the full, long formatted date:</description></item><item><title>Unrecognized selector `objectAtIndex`</title><link>https://sleepyfran.github.io/knowledge/docs/swift/coredata/errors-and-gotchas/unrecognized-selector-objectatindex/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sleepyfran.github.io/knowledge/docs/swift/coredata/errors-and-gotchas/unrecognized-selector-objectatindex/</guid><description>Unrecognized selector objectAtIndex # 2022-06-21 22:41:30.447763+0200 App[56115:1179524] -[__NSCFSet objectAtIndex:]: unrecognized selector sent to instance 0x600003df9c20 This happened with the following code, basically when trying to do a ForEach on a property coming from a CoreData model:
import CoreData import SwiftUI struct BudgetView: View { @FetchRequest(entity: CategoryGroup.entity(), sortDescriptors: []) var categoryGroups: FetchedResults&amp;lt;CategoryGroup&amp;gt; var body: some View { VStack { List { ForEach(categoryGroups, id: \.id) { group in Text(group.name) ForEach(group.categories, id: \.</description></item></channel></rss>