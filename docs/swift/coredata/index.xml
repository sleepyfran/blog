<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CoreData on ðŸŒ» sleepyfran's knowledge garden</title><link>https://sleepyfran.github.io/knowledge/docs/swift/coredata/</link><description>Recent content in CoreData on ðŸŒ» sleepyfran's knowledge garden</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sleepyfran.github.io/knowledge/docs/swift/coredata/index.xml" rel="self" type="application/rss+xml"/><item><title>Grouped queries in SwiftUI</title><link>https://sleepyfran.github.io/knowledge/docs/swift/coredata/swiftui-grouped-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sleepyfran.github.io/knowledge/docs/swift/coredata/swiftui-grouped-queries/</guid><description>Grouped queries in SwiftUI # Querying # While developing Maby I needed to retrieve all events that happened, grouped by dates. Now of course I could just slap a FetchRequest and then manually group the results into a dictionary, specially given how easy it is with the grouping init, but it turns out that there&amp;rsquo;s a better way.
Since iOS/iPadOS/tvOS 15, macOS 12 and watchOS 8 there&amp;rsquo;s a new fetch request in town called SectionedFetchRequest that allows us to specify a type to group by and an entity to group, so for example in my case I could just do the following:</description></item></channel></rss>